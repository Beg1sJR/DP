"use client"

import { useAuth } from "@/context/AuthContext"
import { useRouter } from "next/navigation"
import { useEffect } from "react"
import type { FC, ReactNode } from "react"

type PropsWithChildren = {
  children?: ReactNode
}

export default function withAuth<P extends PropsWithChildren>(
  Component: FC<P>,
  allowedRoles?: string[]
): FC<P> {
  const AuthenticatedComponent: FC<P> = (props) => {
    const { user, loaded } = useAuth()
    const router = useRouter()

    useEffect(() => {
      if (!loaded) return

      if (!user) {
        // ‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Üí –Ω–∞ /login
        router.replace("/login")
      } else if (allowedRoles && !allowedRoles.includes(user.role)) {
        // üîí –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –ø–æ —Ä–æ–ª–∏ ‚Üí –Ω–∞ /unauthorized
        router.replace("/unauthorized")
      }
    }, [loaded, user, router])

    // –ü–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    if (!loaded) return null

    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!user) return null

    // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ —Ä–æ–ª—å –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞
    if (allowedRoles && !allowedRoles.includes(user.role)) return null

    return <Component {...props} />
  }

  return AuthenticatedComponent
}
